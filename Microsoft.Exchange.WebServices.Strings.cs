// WARNING:
// This file was generated by the LocalizedStringGen Tool.
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Resources;
using System.ComponentModel;

using Microsoft.Exchange.WebServices.Data;
namespace Microsoft.Exchange.WebServices
{
	/// <summary>
	/// Localized Strings
	/// </summary>
	internal static class Strings
	{
		/// <summary>
		/// IDS available on this class that do not require parameters.
		/// Using this array is faster than calling enum.ToString.
		/// </summary>
		private static Dictionary<uint,string> stringIDs = new Dictionary<uint,string>(193);

		static Strings()
		{
			stringIDs.Add(0x613D8D42, "CannotRemoveSubscriptionFromLiveConnection");
			stringIDs.Add(0xC8061F83, "ReadAccessInvalidForNonCalendarFolder");
			stringIDs.Add(0x543AB627, "PropertyDefinitionPropertyMustBeSet");
			stringIDs.Add(0xA76CAB5C, "ArgumentIsBlankString");
			stringIDs.Add(0x7DCCA6A1, "InvalidAutodiscoverDomainsCount");
			stringIDs.Add(0xE5441E37, "MinutesMustBeBetween0And1439");
			stringIDs.Add(0xDE08016E, "DeleteInvalidForUnsavedUserConfiguration");
			stringIDs.Add(0x2BAED23C, "PeriodNotFound");
			stringIDs.Add(0x2C487119, "InvalidAutodiscoverSmtpAddress");
			stringIDs.Add(0x8D5EE9FD, "InvalidOAuthToken");
			stringIDs.Add(0x203BAAEB, "MaxScpHopsExceeded");
			stringIDs.Add(0x189CDA38, "ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst");
			stringIDs.Add(0xEA68953F, "CurrentPositionNotElementStart");
			stringIDs.Add(0x690A8198, "CannotConvertBetweenTimeZones");
			stringIDs.Add(0xAFB1430D, "FrequencyMustBeBetween1And1440");
			stringIDs.Add(0xFD9F412B, "CannotSetDelegateFolderPermissionLevelToCustom");
			stringIDs.Add(0xDCCE8BD, "PartnerTokenIncompatibleWithRequestVersion");
			stringIDs.Add(0xCEDBC22, "InvalidAutodiscoverRequest");
			stringIDs.Add(0xA6A7394E, "InvalidAsyncResult");
			stringIDs.Add(0x6FCA6BF9, "InvalidMailboxType");
			stringIDs.Add(0x15F65F41, "AttachmentCollectionNotLoaded");
			stringIDs.Add(0x73779355, "ParameterIncompatibleWithRequestVersion");
			stringIDs.Add(0x30899FDA, "DayOfWeekIndexMustBeSpecifiedForRecurrencePattern");
			stringIDs.Add(0x15CEF68E, "WLIDCredentialsCannotBeUsedWithLegacyAutodiscover");
			stringIDs.Add(0x97185288, "PropertyCannotBeUpdated");
			stringIDs.Add(0xE3BC337B, "IncompatibleTypeForArray");
			stringIDs.Add(0xEAA81D70, "PercentCompleteMustBeBetween0And100");
			stringIDs.Add(0x1B716015, "AutodiscoverServiceIncompatibleWithRequestVersion");
			stringIDs.Add(0x69C3593A, "InvalidAutodiscoverSmtpAddressesCount");
			stringIDs.Add(0x72958662, "ServiceUrlMustBeSet");
			stringIDs.Add(0xF93561F4, "ItemTypeNotCompatible");
			stringIDs.Add(0x5A6929A8, "AttachmentItemTypeMismatch");
			stringIDs.Add(0xD7CD8BAF, "UnsupportedWebProtocol");
			stringIDs.Add(0x2E5217A6, "EnumValueIncompatibleWithRequestVersion");
			stringIDs.Add(0x7BFD2FDF, "UnexpectedElement");
			stringIDs.Add(0x9B15A76, "InvalidOrderBy");
			stringIDs.Add(0xDE5F48A4, "NoAppropriateConstructorForItemClass");
			stringIDs.Add(0x4F8954FE, "SearchFilterAtIndexIsInvalid");
			stringIDs.Add(0xEBDE84C1, "DeletingThisObjectTypeNotAuthorized");
			stringIDs.Add(0x77EC89E6, "PropertyCannotBeDeleted");
			stringIDs.Add(0x2F3E406, "ValuePropertyMustBeSet");
			stringIDs.Add(0xF8FB27A7, "TagValueIsOutOfRange");
			stringIDs.Add(0x3548EE5F, "ItemToUpdateCannotBeNullOrNew");
			stringIDs.Add(0x9493887B, "SearchParametersRootFolderIdsEmpty");
			stringIDs.Add(0x8214D970, "MailboxQueriesParameterIsNotSpecified");
			stringIDs.Add(0xB791D498, "FolderPermissionHasInvalidUserId");
			stringIDs.Add(0x5ABAD5D, "InvalidAutodiscoverDomain");
			stringIDs.Add(0x4BFD8E64, "MailboxesParameterIsNotSpecified");
			stringIDs.Add(0xBF28B285, "ParentFolderDoesNotHaveId");
			stringIDs.Add(0xB5551D4, "DayOfMonthMustBeSpecifiedForRecurrencePattern");
			stringIDs.Add(0x34D2E68C, "ClassIncompatibleWithRequestVersion");
			stringIDs.Add(0x3903A406, "CertificateHasNoPrivateKey");
			stringIDs.Add(0x9E91BB2B, "InvalidOrUnsupportedTimeZoneDefinition");
			stringIDs.Add(0x3A76C692, "HourMustBeBetween0And23");
			stringIDs.Add(0x6F26C41A, "TimeoutMustBeBetween1And1440");
			stringIDs.Add(0x6687519, "CredentialsRequired");
			stringIDs.Add(0x4D901207, "MustLoadOrAssignPropertyBeforeAccess");
			stringIDs.Add(0x905762A3, "InvalidAutodiscoverServiceResponse");
			stringIDs.Add(0xD8D5A646, "CannotCallConnectDuringLiveConnection");
			stringIDs.Add(0x76A1D4F2, "ObjectDoesNotHaveId");
			stringIDs.Add(0x8D818B6A, "CannotAddSubscriptionToLiveConnection");
			stringIDs.Add(0xEDC75E63, "MaxChangesMustBeBetween1And512");
			stringIDs.Add(0xDF3C4E63, "AttributeValueCannotBeSerialized");
			stringIDs.Add(0x4A26582E, "NumberOfDaysMustBePositive");
			stringIDs.Add(0x821DC6E4, "SearchFilterMustBeSet");
			stringIDs.Add(0xA0BFD764, "EndDateMustBeGreaterThanStartDate");
			stringIDs.Add(0xCB4CD6AC, "InvalidDateTime");
			stringIDs.Add(0x955E2188, "UpdateItemsDoesNotAllowAttachments");
			stringIDs.Add(0xBF5D7B10, "TimeoutMustBeGreaterThanZero");
			stringIDs.Add(0x4E21400, "AutodiscoverInvalidSettingForOutlookProvider");
			stringIDs.Add(0x2A21F5CF, "InvalidRedirectionResponseReturned");
			stringIDs.Add(0xDE34DDBA, "ExpectedStartElement");
			stringIDs.Add(0xAE5D531A, "DaysOfTheWeekNotSpecified");
			stringIDs.Add(0xAC165822, "FolderToUpdateCannotBeNullOrNew");
			stringIDs.Add(0x65E73DF5, "PartnerTokenRequestRequiresUrl");
			stringIDs.Add(0xEFA0CE39, "NumberOfOccurrencesMustBeGreaterThanZero");
			stringIDs.Add(0x20072F7D, "JsonSerializationNotImplemented");
			stringIDs.Add(0xFAE6B08, "StartTimeZoneRequired");
			stringIDs.Add(0x8899FC05, "PropertyAlreadyExistsInOrderByCollection");
			stringIDs.Add(0x83B8FC57, "ItemAttachmentMustBeNamed");
			stringIDs.Add(0xA045EB0B, "InvalidAutodiscoverSettingsCount");
			stringIDs.Add(0x4E4C0734, "LoadingThisObjectTypeNotSupported");
			stringIDs.Add(0xCE44BBB6, "UserIdForDelegateUserNotSpecified");
			stringIDs.Add(0xA22B28BD, "PhoneCallAlreadyDisconnected");
			stringIDs.Add(0x5743429C, "OperationDoesNotSupportAttachments");
			stringIDs.Add(0x5DF2F65, "UnsupportedTimeZonePeriodTransitionTarget");
			stringIDs.Add(0x1C4DB110, "IEnumerableDoesNotContainThatManyObject");
			stringIDs.Add(0x38CEBBE4, "UpdateItemsDoesNotSupportNewOrUnchangedItems");
			stringIDs.Add(0x4FFA3254, "ValidationFailed");
			stringIDs.Add(0xD8C00469, "InvalidRecurrencePattern");
			stringIDs.Add(0xF8910303, "TimeWindowStartTimeMustBeGreaterThanEndTime");
			stringIDs.Add(0x160ADFC4, "InvalidAttributeValue");
			stringIDs.Add(0x91FAF35B, "FileAttachmentContentIsNotSet");
			stringIDs.Add(0x25705F8C, "AutodiscoverDidNotReturnEwsUrl");
			stringIDs.Add(0x193D82E9, "RecurrencePatternMustHaveStartDate");
			stringIDs.Add(0x5336FB90, "OccurrenceIndexMustBeGreaterThanZero");
			stringIDs.Add(0x76224E13, "ServiceResponseDoesNotContainXml");
			stringIDs.Add(0x98A0E992, "ItemIsOutOfDate");
			stringIDs.Add(0xD8CA3FE3, "MinuteMustBeBetween0And59");
			stringIDs.Add(0xEBB9D7D5, "NoSoapOrWsSecurityEndpointAvailable");
			stringIDs.Add(0xBE1AFE61, "ElementNotFound");
			stringIDs.Add(0xFBC1956C, "IndexIsOutOfRange");
			stringIDs.Add(0x33CDB41F, "PropertyIsReadOnly");
			stringIDs.Add(0xA7F4CA8B, "AttachmentCreationFailed");
			stringIDs.Add(0xBAC96B0B, "DayOfMonthMustBeBetween1And31");
			stringIDs.Add(0x7CAD6527, "ServiceRequestFailed");
			stringIDs.Add(0x7B6D649, "DelegateUserHasInvalidUserId");
			stringIDs.Add(0x3FC08555, "SearchFilterComparisonValueTypeIsNotSupported");
			stringIDs.Add(0xFDD04455, "ElementValueCannotBeSerialized");
			stringIDs.Add(0xAE573319, "PropertyValueMustBeSpecifiedForRecurrencePattern");
			stringIDs.Add(0x914013AD, "NonSummaryPropertyCannotBeUsed");
			stringIDs.Add(0x80169BC, "HoldIdParameterIsNotSpecified");
			stringIDs.Add(0x1464CCF, "TransitionGroupNotFound");
			stringIDs.Add(0xF70DCBEC, "ObjectTypeNotSupported");
			stringIDs.Add(0xCDE313FD, "InvalidTimeoutValue");
			stringIDs.Add(0xC7060EE6, "AutodiscoverRedirectBlocked");
			stringIDs.Add(0xDD96B348, "PropertySetCannotBeModified");
			stringIDs.Add(0xE71D21F1, "DayOfTheWeekMustBeSpecifiedForRecurrencePattern");
			stringIDs.Add(0xE98CD879, "ServiceObjectAlreadyHasId");
			stringIDs.Add(0xFEC53943, "MethodIncompatibleWithRequestVersion");
			stringIDs.Add(0xA29715DB, "OperationNotSupportedForPropertyDefinitionType");
			stringIDs.Add(0xEA8624D9, "InvalidElementStringValue");
			stringIDs.Add(0x1DD2C899, "CollectionIsEmpty");
			stringIDs.Add(0x34C2BDF6, "InvalidFrequencyValue");
			stringIDs.Add(0x2097E3E5, "UnexpectedEndOfXmlDocument");
			stringIDs.Add(0xD5532BB1, "FolderTypeNotCompatible");
			stringIDs.Add(0xCDB73975, "RequestIncompatibleWithRequestVersion");
			stringIDs.Add(0xF73EBA20, "PropertyTypeIncompatibleWhenUpdatingCollection");
			stringIDs.Add(0x23F565FA, "ServerVersionNotSupported");
			stringIDs.Add(0x27B94859, "DurationMustBeSpecifiedWhenScheduled");
			stringIDs.Add(0x3BE90861, "NoError");
			stringIDs.Add(0xECC012C5, "CannotUpdateNewUserConfiguration");
			stringIDs.Add(0x915293F9, "ObjectTypeIncompatibleWithRequestVersion");
			stringIDs.Add(0xD6DD72E4, "NullStringArrayElementInvalid");
			stringIDs.Add(0x13E7AF22, "HttpsIsRequired");
			stringIDs.Add(0x93D74242, "MergedFreeBusyIntervalMustBeSmallerThanTimeWindow");
			stringIDs.Add(0x1394CEC5, "SecondMustBeBetween0And59");
			stringIDs.Add(0xD66536D9, "AtLeastOneAttachmentCouldNotBeDeleted");
			stringIDs.Add(0x498A5CB6, "IdAlreadyInList");
			stringIDs.Add(0xC46FD22B, "BothSearchFilterAndQueryStringCannotBeSpecified");
			stringIDs.Add(0xC9B083DF, "AdditionalPropertyIsNull");
			stringIDs.Add(0x8A12C5AB, "InvalidEmailAddress");
			stringIDs.Add(0x5EAE8E19, "MaximumRedirectionHopsExceeded");
			stringIDs.Add(0xB8A0AE2B, "AutodiscoverCouldNotBeLocated");
			stringIDs.Add(0xA1DC721C, "NoSubscriptionsOnConnection");
			stringIDs.Add(0x3F6173E8, "PermissionLevelInvalidForNonCalendarFolder");
			stringIDs.Add(0xA99BA82C, "InvalidAuthScheme");
			stringIDs.Add(0x128A91B2, "JsonDeserializationNotImplemented");
			stringIDs.Add(0xA381F206, "ValuePropertyNotLoaded");
			stringIDs.Add(0x3243DF4B, "PropertyIncompatibleWithRequestVersion");
			stringIDs.Add(0x914372D4, "OffsetMustBeGreaterThanZero");
			stringIDs.Add(0x29285351, "CreateItemsDoesNotAllowAttachments");
			stringIDs.Add(0x91C164B6, "PropertyDefinitionTypeMismatch");
			stringIDs.Add(0x7EEAD2D3, "IntervalMustBeGreaterOrEqualToOne");
			stringIDs.Add(0x39530174, "CannotSetPermissionLevelToCustom");
			stringIDs.Add(0xAE1D0E94, "CannotAddRequestHeader");
			stringIDs.Add(0xFE34E9C2, "ArrayMustHaveAtLeastOneElement");
			stringIDs.Add(0x21D85E49, "MonthMustBeSpecifiedForRecurrencePattern");
			stringIDs.Add(0xE6A8939A, "ValueOfTypeCannotBeConverted");
			stringIDs.Add(0x2EF8B537, "ValueCannotBeConverted");
			stringIDs.Add(0x5851E1E7, "ServerErrorAndStackTraceDetails");
			stringIDs.Add(0x9A246FD1, "FolderPermissionLevelMustBeSet");
			stringIDs.Add(0xEE9EFD84, "AutodiscoverError");
			stringIDs.Add(0xB6CBADF4, "ArrayMustHaveSingleDimension");
			stringIDs.Add(0x8519C8DE, "InvalidPropertyValueNotInRange");
			stringIDs.Add(0x56A9E09D, "RegenerationPatternsOnlyValidForTasks");
			stringIDs.Add(0x3685BB1F, "ItemAttachmentCannotBeUpdated");
			stringIDs.Add(0x5772E4E0, "EqualityComparisonFilterIsInvalid");
			stringIDs.Add(0xAFDCECE4, "AutodiscoverServiceRequestRequiresDomainOrUrl");
			stringIDs.Add(0xEA308D52, "InvalidUser");
			stringIDs.Add(0xACF5C8A9, "AccountIsLocked");
			stringIDs.Add(0xA4AADD36, "InvalidDomainName");
			stringIDs.Add(0x2A538AE5, "TooFewServiceReponsesReturned");
			stringIDs.Add(0x1B9FE7B9, "CannotSubscribeToStatusEvents");
			stringIDs.Add(0x3F951D24, "InvalidSortByPropertyForMailboxSearch");
			stringIDs.Add(0x7D37DB2F, "UnexpectedElementType");
			stringIDs.Add(0x2932E12E, "ValueMustBeGreaterThanZero");
			stringIDs.Add(0x88A42500, "AttachmentCannotBeUpdated");
			stringIDs.Add(0xE9320D99, "CreateItemsDoesNotHandleExistingItems");
			stringIDs.Add(0xB0DABCAD, "MultipleContactPhotosInAttachment");
			stringIDs.Add(0xC9E9A578, "InvalidRecurrenceRange");
			stringIDs.Add(0xFAFD3A76, "CannotSetBothImpersonatedAndPrivilegedUser");
			stringIDs.Add(0x5D519B6C, "NewMessagesWithAttachmentsCannotBeSentDirectly");
			stringIDs.Add(0xD891AB3E, "CannotCallDisconnectWithNoLiveConnection");
			stringIDs.Add(0xEAE01EC6, "IdPropertyMustBeSet");
			stringIDs.Add(0x5D26C8F5, "ValuePropertyNotAssigned");
			stringIDs.Add(0xF2109C7C, "ZeroLengthArrayInvalid");
			stringIDs.Add(0xC76F1935, "HoldMailboxesParameterIsNotSpecified");
			stringIDs.Add(0x875232CC, "CannotSaveNotNewUserConfiguration");
			stringIDs.Add(0x7DD64947, "ServiceObjectDoesNotHaveId");
			stringIDs.Add(0x1D4BFF0A, "PropertyCollectionSizeMismatch");
			stringIDs.Add(0xAA8E93F3, "XsDurationCouldNotBeParsed");
			stringIDs.Add(0x87D83F11, "UnknownTimeZonePeriodTransitionType");
		}


		/// <summary>
		/// ID of the strings available on this class that do not require parameters.
		/// </summary>
		public enum IDs : uint
		{
			/// <summary>
			/// Subscriptions can't be removed from an open connection.
			/// </summary>
			CannotRemoveSubscriptionFromLiveConnection = 0x613D8D42, 
			/// <summary>
			/// The Permission read access value {0} can't be used with a non-calendar folder.
			/// </summary>
			ReadAccessInvalidForNonCalendarFolder = 0xC8061F83, 
			/// <summary>
			/// The PropertyDefinition property must be set.
			/// </summary>
			PropertyDefinitionPropertyMustBeSet = 0x543AB627, 
			/// <summary>
			/// The string argument contains only white space characters.
			/// </summary>
			ArgumentIsBlankString = 0xA76CAB5C, 
			/// <summary>
			/// At least one domain name must be requested.
			/// </summary>
			InvalidAutodiscoverDomainsCount = 0x7DCCA6A1, 
			/// <summary>
			/// minutes must be between 0 and 1439, inclusive.
			/// </summary>
			MinutesMustBeBetween0And1439 = 0xE5441E37, 
			/// <summary>
			/// This user configuration object can't be deleted because it's never been saved.
			/// </summary>
			DeleteInvalidForUnsavedUserConfiguration = 0xDE08016E, 
			/// <summary>
			/// Invalid transition. A period with the specified Id couldn't be found: {0}
			/// </summary>
			PeriodNotFound = 0x2BAED23C, 
			/// <summary>
			/// A valid SMTP address must be specified.
			/// </summary>
			InvalidAutodiscoverSmtpAddress = 0x2C487119, 
			/// <summary>
			/// The given token is invalid.
			/// </summary>
			InvalidOAuthToken = 0x8D5EE9FD, 
			/// <summary>
			/// The number of SCP URL hops exceeded the limit.
			/// </summary>
			MaxScpHopsExceeded = 0x203BAAEB, 
			/// <summary>
			/// The contact group's Members property must be reloaded before newly-added members can be updated.
			/// </summary>
			ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst = 0x189CDA38, 
			/// <summary>
			/// The current position is not the start of an element.
			/// </summary>
			CurrentPositionNotElementStart = 0xEA68953F, 
			/// <summary>
			/// Unable to convert {0} from {1} to {2}.
			/// </summary>
			CannotConvertBetweenTimeZones = 0x690A8198, 
			/// <summary>
			/// The frequency must be a value between 1 and 1440.
			/// </summary>
			FrequencyMustBeBetween1And1440 = 0xAFB1430D, 
			/// <summary>
			/// This operation can't be performed because one or more folder permission levels were set to Custom.
			/// </summary>
			CannotSetDelegateFolderPermissionLevelToCustom = 0xFD9F412B, 
			/// <summary>
			/// TryGetPartnerAccess only supports {0} or a later version in Microsoft-hosted data center.
			/// </summary>
			PartnerTokenIncompatibleWithRequestVersion = 0xDCCE8BD, 
			/// <summary>
			/// Invalid Autodiscover request: '{0}'
			/// </summary>
			InvalidAutodiscoverRequest = 0xCEDBC22, 
			/// <summary>
			/// The IAsyncResult object was not returned from the corresponding asynchronous method of the original ExchangeService object.  
			/// </summary>
			InvalidAsyncResult = 0xA6A7394E, 
			/// <summary>
			/// The mailbox type isn't valid.
			/// </summary>
			InvalidMailboxType = 0x6FCA6BF9, 
			/// <summary>
			/// The attachment collection must be loaded.
			/// </summary>
			AttachmentCollectionNotLoaded = 0x15F65F41, 
			/// <summary>
			/// The parameter {0} is only valid for Exchange Server version {1} or a later version.
			/// </summary>
			ParameterIncompatibleWithRequestVersion = 0x73779355, 
			/// <summary>
			/// The recurrence pattern's DayOfWeekIndex property must be specified.
			/// </summary>
			DayOfWeekIndexMustBeSpecifiedForRecurrencePattern = 0x30899FDA, 
			/// <summary>
			/// This type of credentials can't be used with this AutodiscoverService.
			/// </summary>
			WLIDCredentialsCannotBeUsedWithLegacyAutodiscover = 0x15CEF68E, 
			/// <summary>
			/// This property can't be updated.
			/// </summary>
			PropertyCannotBeUpdated = 0x97185288, 
			/// <summary>
			/// Type {0} can't be used as an array of type {1}.
			/// </summary>
			IncompatibleTypeForArray = 0xE3BC337B, 
			/// <summary>
			/// PercentComplete must be between 0 and 100.
			/// </summary>
			PercentCompleteMustBeBetween0And100 = 0xEAA81D70, 
			/// <summary>
			/// The Autodiscover service only supports {0} or a later version.
			/// </summary>
			AutodiscoverServiceIncompatibleWithRequestVersion = 0x1B716015, 
			/// <summary>
			/// At least one SMTP address must be requested.
			/// </summary>
			InvalidAutodiscoverSmtpAddressesCount = 0x69C3593A, 
			/// <summary>
			/// The Url property on the ExchangeService object must be set.
			/// </summary>
			ServiceUrlMustBeSet = 0x72958662, 
			/// <summary>
			/// The item type returned by the service ({0}) isn't compatible with the requested item type ({1}).
			/// </summary>
			ItemTypeNotCompatible = 0xF93561F4, 
			/// <summary>
			/// Can not update this attachment item since the item in the response has a different type.
			/// </summary>
			AttachmentItemTypeMismatch = 0x5A6929A8, 
			/// <summary>
			/// Protocol {0} isn't supported for service requests.
			/// </summary>
			UnsupportedWebProtocol = 0xD7CD8BAF, 
			/// <summary>
			/// Enumeration value {0} in enumeration type {1} is only valid for Exchange version {2} or later.
			/// </summary>
			EnumValueIncompatibleWithRequestVersion = 0x2E5217A6, 
			/// <summary>
			/// An element node '{0}:{1}' of the type {2} was expected, but node '{3}' of type {4} was found.
			/// </summary>
			UnexpectedElement = 0x7BFD2FDF, 
			/// <summary>
			/// At least one of the property definitions in the OrderBy clause is null.
			/// </summary>
			InvalidOrderBy = 0x9B15A76, 
			/// <summary>
			/// No appropriate constructor could be found for this item class.
			/// </summary>
			NoAppropriateConstructorForItemClass = 0xDE5F48A4, 
			/// <summary>
			/// The search filter at index {0} is invalid.
			/// </summary>
			SearchFilterAtIndexIsInvalid = 0x4F8954FE, 
			/// <summary>
			/// Deleting this type of object isn't authorized.
			/// </summary>
			DeletingThisObjectTypeNotAuthorized = 0xEBDE84C1, 
			/// <summary>
			/// This property can't be deleted.
			/// </summary>
			PropertyCannotBeDeleted = 0x77EC89E6, 
			/// <summary>
			/// The Value property must be set.
			/// </summary>
			ValuePropertyMustBeSet = 0x2F3E406, 
			/// <summary>
			/// The extended property tag value must be in the range of 0 to 65,535.
			/// </summary>
			TagValueIsOutOfRange = 0xF8FB27A7, 
			/// <summary>
			/// Items[{0}] is either null or does not have an Id.
			/// </summary>
			ItemToUpdateCannotBeNullOrNew = 0x3548EE5F, 
			/// <summary>
			/// SearchParameters must contain at least one folder id.
			/// </summary>
			SearchParametersRootFolderIdsEmpty = 0x9493887B, 
			/// <summary>
			/// The collection of query and mailboxes parameter is not specified.
			/// </summary>
			MailboxQueriesParameterIsNotSpecified = 0x8214D970, 
			/// <summary>
			/// The UserId in the folder permission at index {0} is invalid. The StandardUser, PrimarySmtpAddress, or SID property must be set.
			/// </summary>
			FolderPermissionHasInvalidUserId = 0xB791D498, 
			/// <summary>
			/// The domain name must be specified.
			/// </summary>
			InvalidAutodiscoverDomain = 0x5ABAD5D, 
			/// <summary>
			/// The array of mailboxes (in legacy DN) is not specified.
			/// </summary>
			MailboxesParameterIsNotSpecified = 0x4BFD8E64, 
			/// <summary>
			/// parentFolder doesn't have an Id.
			/// </summary>
			ParentFolderDoesNotHaveId = 0xBF28B285, 
			/// <summary>
			/// The recurrence pattern's DayOfMonth property must be specified.
			/// </summary>
			DayOfMonthMustBeSpecifiedForRecurrencePattern = 0xB5551D4, 
			/// <summary>
			/// Class {0} is only valid for Exchange version {1} or later.
			/// </summary>
			ClassIncompatibleWithRequestVersion = 0x34D2E68C, 
			/// <summary>
			/// The given certificate does not have the private key. The private key is necessary to sign part of the request message.
			/// </summary>
			CertificateHasNoPrivateKey = 0x3903A406, 
			/// <summary>
			/// The time zone definition is invalid or unsupported.
			/// </summary>
			InvalidOrUnsupportedTimeZoneDefinition = 0x9E91BB2B, 
			/// <summary>
			/// Hour must be between 0 and 23.
			/// </summary>
			HourMustBeBetween0And23 = 0x3A76C692, 
			/// <summary>
			/// Timeout must be a value between 1 and 1440.
			/// </summary>
			TimeoutMustBeBetween1And1440 = 0x6F26C41A, 
			/// <summary>
			/// Credentials are required to make a service request.
			/// </summary>
			CredentialsRequired = 0x6687519, 
			/// <summary>
			/// You must load or assign this property before you can read its value.
			/// </summary>
			MustLoadOrAssignPropertyBeforeAccess = 0x4D901207, 
			/// <summary>
			/// The Autodiscover service response was invalid.
			/// </summary>
			InvalidAutodiscoverServiceResponse = 0x905762A3, 
			/// <summary>
			/// The connection has already opened.
			/// </summary>
			CannotCallConnectDuringLiveConnection = 0xD8D5A646, 
			/// <summary>
			/// This service object doesn't have an ID.
			/// </summary>
			ObjectDoesNotHaveId = 0x76A1D4F2, 
			/// <summary>
			/// Subscriptions can't be added to an open connection.
			/// </summary>
			CannotAddSubscriptionToLiveConnection = 0x8D818B6A, 
			/// <summary>
			/// MaxChangesReturned must be between 1 and 512.
			/// </summary>
			MaxChangesMustBeBetween1And512 = 0xEDC75E63, 
			/// <summary>
			/// Values of type '{0}' can't be used for the '{1}' attribute.
			/// </summary>
			AttributeValueCannotBeSerialized = 0xDF3C4E63, 
			/// <summary>
			/// NumberOfDays must be zero or greater. Zero indicates no limit.
			/// </summary>
			NumberOfDaysMustBePositive = 0x4A26582E, 
			/// <summary>
			/// The SearchFilter property must be set.
			/// </summary>
			SearchFilterMustBeSet = 0x821DC6E4, 
			/// <summary>
			/// EndDate must be greater than StartDate.
			/// </summary>
			EndDateMustBeGreaterThanStartDate = 0xA0BFD764, 
			/// <summary>
			/// Invalid date and time: {0}.
			/// </summary>
			InvalidDateTime = 0xCB4CD6AC, 
			/// <summary>
			/// This operation can't be performed because attachments have been added or deleted for one or more items.
			/// </summary>
			UpdateItemsDoesNotAllowAttachments = 0x955E2188, 
			/// <summary>
			/// Timeout must be greater than zero.
			/// </summary>
			TimeoutMustBeGreaterThanZero = 0xBF5D7B10, 
			/// <summary>
			/// The requested setting, '{0}', isn't supported by this Autodiscover endpoint.
			/// </summary>
			AutodiscoverInvalidSettingForOutlookProvider = 0x4E21400, 
			/// <summary>
			/// The service returned an invalid redirection response.
			/// </summary>
			InvalidRedirectionResponseReturned = 0x2A21F5CF, 
			/// <summary>
			/// The start element was expected, but node '{0}' of type {1} was found.
			/// </summary>
			ExpectedStartElement = 0xDE34DDBA, 
			/// <summary>
			/// The recurrence pattern's property DaysOfTheWeek must contain at least one day of the week.
			/// </summary>
			DaysOfTheWeekNotSpecified = 0xAE5D531A, 
			/// <summary>
			/// Folders[{0}] is either null or does not have an Id.
			/// </summary>
			FolderToUpdateCannotBeNullOrNew = 0xAC165822, 
			/// <summary>
			/// TryGetPartnerAccess request requires the Url be set with the partner's autodiscover url first.
			/// </summary>
			PartnerTokenRequestRequiresUrl = 0x65E73DF5, 
			/// <summary>
			/// NumberOfOccurrences must be greater than 0.
			/// </summary>
			NumberOfOccurrencesMustBeGreaterThanZero = 0xEFA0CE39, 
			/// <summary>
			/// JSON Serialization is not implemented for this request. Please retry the request with the XML rendering method.
			/// </summary>
			JsonSerializationNotImplemented = 0x20072F7D, 
			/// <summary>
			/// StartTimeZone required when setting the Start, End, IsAllDayEvent, or Recurrence properties.  You must load or assign this property before attempting to update the appointment.
			/// </summary>
			StartTimeZoneRequired = 0xFAE6B08, 
			/// <summary>
			/// Property {0} already exists in OrderByCollection.
			/// </summary>
			PropertyAlreadyExistsInOrderByCollection = 0x8899FC05, 
			/// <summary>
			/// The name of the item attachment at index {0} must be set.
			/// </summary>
			ItemAttachmentMustBeNamed = 0x83B8FC57, 
			/// <summary>
			/// At least one setting must be requested.
			/// </summary>
			InvalidAutodiscoverSettingsCount = 0xA045EB0B, 
			/// <summary>
			/// Loading this type of object is not supported.
			/// </summary>
			LoadingThisObjectTypeNotSupported = 0x4E4C0734, 
			/// <summary>
			/// The UserId in the DelegateUser hasn't been specified.
			/// </summary>
			UserIdForDelegateUserNotSpecified = 0xCE44BBB6, 
			/// <summary>
			/// The phone call has already been disconnected.
			/// </summary>
			PhoneCallAlreadyDisconnected = 0xA22B28BD, 
			/// <summary>
			/// This operation isn't supported on attachments.
			/// </summary>
			OperationDoesNotSupportAttachments = 0x5743429C, 
			/// <summary>
			/// The time zone transition target isn't supported.
			/// </summary>
			UnsupportedTimeZonePeriodTransitionTarget = 0x5DF2F65, 
			/// <summary>
			/// The IEnumerable doesn't contain that many objects.
			/// </summary>
			IEnumerableDoesNotContainThatManyObject = 0x1C4DB110, 
			/// <summary>
			/// This operation can't be performed because one or more items are new or unmodified.
			/// </summary>
			UpdateItemsDoesNotSupportNewOrUnchangedItems = 0x38CEBBE4, 
			/// <summary>
			/// Validation failed.
			/// </summary>
			ValidationFailed = 0x4FFA3254, 
			/// <summary>
			/// Invalid recurrence pattern: ({0}).
			/// </summary>
			InvalidRecurrencePattern = 0xD8C00469, 
			/// <summary>
			/// The time window's end time must be greater than its start time.
			/// </summary>
			TimeWindowStartTimeMustBeGreaterThanEndTime = 0xF8910303, 
			/// <summary>
			/// The invalid value '{0}' was specified for the '{1}' attribute.
			/// </summary>
			InvalidAttributeValue = 0x160ADFC4, 
			/// <summary>
			/// The content of the file attachment at index {0} must be set.
			/// </summary>
			FileAttachmentContentIsNotSet = 0x91FAF35B, 
			/// <summary>
			/// The Autodiscover service didn't return an appropriate URL that can be used for the ExchangeService Autodiscover URL.
			/// </summary>
			AutodiscoverDidNotReturnEwsUrl = 0x25705F8C, 
			/// <summary>
			/// The recurrence pattern's StartDate property must be specified.
			/// </summary>
			RecurrencePatternMustHaveStartDate = 0x193D82E9, 
			/// <summary>
			/// OccurrenceIndex must be greater than 0.
			/// </summary>
			OccurrenceIndexMustBeGreaterThanZero = 0x5336FB90, 
			/// <summary>
			/// The response received from the service didn't contain valid XML.
			/// </summary>
			ServiceResponseDoesNotContainXml = 0x76224E13, 
			/// <summary>
			/// The operation can't be performed because the item is out of date. Reload the item and try again.
			/// </summary>
			ItemIsOutOfDate = 0x98A0E992, 
			/// <summary>
			/// Minute must be between 0 and 59.
			/// </summary>
			MinuteMustBeBetween0And59 = 0xD8CA3FE3, 
			/// <summary>
			/// No appropriate Autodiscover SOAP or WS-Security endpoint is available.
			/// </summary>
			NoSoapOrWsSecurityEndpointAvailable = 0xEBB9D7D5, 
			/// <summary>
			/// The element '{0}' in namespace '{1}' wasn't found at the current position.
			/// </summary>
			ElementNotFound = 0xBE1AFE61, 
			/// <summary>
			/// index is out of range.
			/// </summary>
			IndexIsOutOfRange = 0xFBC1956C, 
			/// <summary>
			/// This property is read-only and can't be set.
			/// </summary>
			PropertyIsReadOnly = 0x33CDB41F, 
			/// <summary>
			/// At least one attachment couldn't be created.
			/// </summary>
			AttachmentCreationFailed = 0xA7F4CA8B, 
			/// <summary>
			/// DayOfMonth must be between 1 and 31.
			/// </summary>
			DayOfMonthMustBeBetween1And31 = 0xBAC96B0B, 
			/// <summary>
			/// The request failed. {0}
			/// </summary>
			ServiceRequestFailed = 0x7CAD6527, 
			/// <summary>
			/// The UserId in the DelegateUser is invalid. The StandardUser, PrimarySmtpAddress or SID property must be set.
			/// </summary>
			DelegateUserHasInvalidUserId = 0x7B6D649, 
			/// <summary>
			/// Values of type '{0}' can't be used as comparison values in search filters.
			/// </summary>
			SearchFilterComparisonValueTypeIsNotSupported = 0x3FC08555, 
			/// <summary>
			/// Values of type '{0}' can't be used for the '{1}' element.
			/// </summary>
			ElementValueCannotBeSerialized = 0xFDD04455, 
			/// <summary>
			/// The recurrence pattern's {0} property must be specified.
			/// </summary>
			PropertyValueMustBeSpecifiedForRecurrencePattern = 0xAE573319, 
			/// <summary>
			/// The property {0} can't be used in {1} requests.
			/// </summary>
			NonSummaryPropertyCannotBeUsed = 0x914013AD, 
			/// <summary>
			/// The hold id parameter is not specified.
			/// </summary>
			HoldIdParameterIsNotSpecified = 0x80169BC, 
			/// <summary>
			/// Invalid transition. A transition group with the specified ID couldn't be found: {0}
			/// </summary>
			TransitionGroupNotFound = 0x1464CCF, 
			/// <summary>
			/// Objects of type {0} can't be added to the dictionary. The following types are supported: string array, byte array, boolean, byte, DateTime, integer, long, string, unsigned integer, and unsigned long.
			/// </summary>
			ObjectTypeNotSupported = 0xF70DCBEC, 
			/// <summary>
			/// {0} is not a valid timeout value. Valid values range from 1 to 1440.
			/// </summary>
			InvalidTimeoutValue = 0xCDE313FD, 
			/// <summary>
			/// Autodiscover blocked a potentially insecure redirection to {0}. To allow Autodiscover to follow the redirection, use the AutodiscoverUrl(string, AutodiscoverRedirectionUrlValidationCallback) overload.
			/// </summary>
			AutodiscoverRedirectBlocked = 0xC7060EE6, 
			/// <summary>
			/// This PropertySet is read-only and can't be modified.
			/// </summary>
			PropertySetCannotBeModified = 0xDD96B348, 
			/// <summary>
			/// The recurrence pattern's property DayOfTheWeek must be specified.
			/// </summary>
			DayOfTheWeekMustBeSpecifiedForRecurrencePattern = 0xE71D21F1, 
			/// <summary>
			/// This operation can't be performed because this service object already has an ID. To update this service object, use the Update() method instead.
			/// </summary>
			ServiceObjectAlreadyHasId = 0xE98CD879, 
			/// <summary>
			/// Method {0} is only valid for Exchange Server version {1} or later.
			/// </summary>
			MethodIncompatibleWithRequestVersion = 0xFEC53943, 
			/// <summary>
			/// This operation isn't supported for property definition type {0}.
			/// </summary>
			OperationNotSupportedForPropertyDefinitionType = 0xA29715DB, 
			/// <summary>
			/// The invalid value '{0}' was specified for the '{1}' element.
			/// </summary>
			InvalidElementStringValue = 0xEA8624D9, 
			/// <summary>
			/// The collection is empty.
			/// </summary>
			CollectionIsEmpty = 0x1DD2C899, 
			/// <summary>
			/// {0} is not a valid frequency value. Valid values range from 1 to 1440.
			/// </summary>
			InvalidFrequencyValue = 0x34C2BDF6, 
			/// <summary>
			/// The XML document ended unexpectedly.
			/// </summary>
			UnexpectedEndOfXmlDocument = 0x2097E3E5, 
			/// <summary>
			/// The folder type returned by the service ({0}) isn't compatible with the requested folder type ({1}).
			/// </summary>
			FolderTypeNotCompatible = 0xD5532BB1, 
			/// <summary>
			/// The service request {0} is only valid for Exchange version {1} or later.
			/// </summary>
			RequestIncompatibleWithRequestVersion = 0xCDB73975, 
			/// <summary>
			/// Can not update the existing collection item since the item in the response has a different type.
			/// </summary>
			PropertyTypeIncompatibleWhenUpdatingCollection = 0xF73EBA20, 
			/// <summary>
			/// Exchange Server doesn't support the requested version.
			/// </summary>
			ServerVersionNotSupported = 0x23F565FA, 
			/// <summary>
			/// Duration must be specified when State is equal to Scheduled.
			/// </summary>
			DurationMustBeSpecifiedWhenScheduled = 0x27B94859, 
			/// <summary>
			/// No error.
			/// </summary>
			NoError = 0x3BE90861, 
			/// <summary>
			/// This user configuration can't be updated because it's never been saved.
			/// </summary>
			CannotUpdateNewUserConfiguration = 0xECC012C5, 
			/// <summary>
			/// The object type {0} is only valid for Exchange Server version {1} or later versions.
			/// </summary>
			ObjectTypeIncompatibleWithRequestVersion = 0x915293F9, 
			/// <summary>
			/// The array contains at least one null element.
			/// </summary>
			NullStringArrayElementInvalid = 0xD6DD72E4, 
			/// <summary>
			/// Https is required when partner token is expected.
			/// </summary>
			HttpsIsRequired = 0x13E7AF22, 
			/// <summary>
			/// MergedFreeBusyInterval must be smaller than the specified time window.
			/// </summary>
			MergedFreeBusyIntervalMustBeSmallerThanTimeWindow = 0x93D74242, 
			/// <summary>
			/// Second must be between 0 and 59.
			/// </summary>
			SecondMustBeBetween0And59 = 0x1394CEC5, 
			/// <summary>
			/// At least one attachment couldn't be deleted.
			/// </summary>
			AtLeastOneAttachmentCouldNotBeDeleted = 0xD66536D9, 
			/// <summary>
			/// The ID is already in the list.
			/// </summary>
			IdAlreadyInList = 0x498A5CB6, 
			/// <summary>
			/// Both search filter and query string can't be specified. One of them must be null.
			/// </summary>
			BothSearchFilterAndQueryStringCannotBeSpecified = 0xC46FD22B, 
			/// <summary>
			/// The additional property at index {0} is null.
			/// </summary>
			AdditionalPropertyIsNull = 0xC9B083DF, 
			/// <summary>
			/// The e-mail address is formed incorrectly.
			/// </summary>
			InvalidEmailAddress = 0x8A12C5AB, 
			/// <summary>
			/// The maximum redirection hop count has been reached.
			/// </summary>
			MaximumRedirectionHopsExceeded = 0x5EAE8E19, 
			/// <summary>
			/// The Autodiscover service couldn't be located.
			/// </summary>
			AutodiscoverCouldNotBeLocated = 0xB8A0AE2B, 
			/// <summary>
			/// You must add at least one subscription to this connection before it can be opened.
			/// </summary>
			NoSubscriptionsOnConnection = 0xA1DC721C, 
			/// <summary>
			/// The Permission level value {0} can't be used with a non-calendar folder.
			/// </summary>
			PermissionLevelInvalidForNonCalendarFolder = 0x3F6173E8, 
			/// <summary>
			/// The token auth scheme should be bearer.
			/// </summary>
			InvalidAuthScheme = 0xA99BA82C, 
			/// <summary>
			/// JSON Deserialization is not implemented for this request. Please retry the request with the XML rendering method.
			/// </summary>
			JsonDeserializationNotImplemented = 0x128A91B2, 
			/// <summary>
			/// This property was requested, but it wasn't returned by the server.
			/// </summary>
			ValuePropertyNotLoaded = 0xA381F206, 
			/// <summary>
			/// The property {0} is valid only for Exchange {1} or later versions.
			/// </summary>
			PropertyIncompatibleWithRequestVersion = 0x3243DF4B, 
			/// <summary>
			/// The offset must be greater than 0.
			/// </summary>
			OffsetMustBeGreaterThanZero = 0x914372D4, 
			/// <summary>
			/// This operation doesn't support items that have attachments.
			/// </summary>
			CreateItemsDoesNotAllowAttachments = 0x29285351, 
			/// <summary>
			/// Property definition type '{0}' and type parameter '{1}' aren't compatible.
			/// </summary>
			PropertyDefinitionTypeMismatch = 0x91C164B6, 
			/// <summary>
			/// The interval must be greater than or equal to 1.
			/// </summary>
			IntervalMustBeGreaterOrEqualToOne = 0x7EEAD2D3, 
			/// <summary>
			/// The PermissionLevel property can't be set to FolderPermissionLevel.Custom. To define a custom permission, set its individual properties to the values you want.
			/// </summary>
			CannotSetPermissionLevelToCustom = 0x39530174, 
			/// <summary>
			/// HTTP header '{0}' isn't permitted. Only HTTP headers with the 'X-' prefix are permitted.
			/// </summary>
			CannotAddRequestHeader = 0xAE1D0E94, 
			/// <summary>
			/// The Array value must have at least one element.
			/// </summary>
			ArrayMustHaveAtLeastOneElement = 0xFE34E9C2, 
			/// <summary>
			/// The recurrence pattern's Month property must be specified.
			/// </summary>
			MonthMustBeSpecifiedForRecurrencePattern = 0x21D85E49, 
			/// <summary>
			/// The value '{0}' of type {1} can't be converted to a value of type {2}.
			/// </summary>
			ValueOfTypeCannotBeConverted = 0xE6A8939A, 
			/// <summary>
			/// The value '{0}' couldn't be converted to type {1}.
			/// </summary>
			ValueCannotBeConverted = 0x2EF8B537, 
			/// <summary>
			/// {0} -- Server Error: {1}: {2} {3}
			/// </summary>
			ServerErrorAndStackTraceDetails = 0x5851E1E7, 
			/// <summary>
			/// The permission level of the folder permission at index {0} must be set.
			/// </summary>
			FolderPermissionLevelMustBeSet = 0x9A246FD1, 
			/// <summary>
			/// The Autodiscover service returned an error.
			/// </summary>
			AutodiscoverError = 0xEE9EFD84, 
			/// <summary>
			/// The array value must have a single dimension.
			/// </summary>
			ArrayMustHaveSingleDimension = 0xB6CBADF4, 
			/// <summary>
			/// {0} must be between {1} and {2}.
			/// </summary>
			InvalidPropertyValueNotInRange = 0x8519C8DE, 
			/// <summary>
			/// Regeneration patterns can only be used with Task items.
			/// </summary>
			RegenerationPatternsOnlyValidForTasks = 0x56A9E09D, 
			/// <summary>
			/// Item attachments can't be updated.
			/// </summary>
			ItemAttachmentCannotBeUpdated = 0x3685BB1F, 
			/// <summary>
			/// Either the OtherPropertyDefinition or the Value properties must be set.
			/// </summary>
			EqualityComparisonFilterIsInvalid = 0x5772E4E0, 
			/// <summary>
			/// This Autodiscover request requires that either the Domain or Url be specified.
			/// </summary>
			AutodiscoverServiceRequestRequiresDomainOrUrl = 0xAFDCECE4, 
			/// <summary>
			/// Invalid user: '{0}'
			/// </summary>
			InvalidUser = 0xEA308D52, 
			/// <summary>
			/// This account is locked. Visit {0} to unlock it.
			/// </summary>
			AccountIsLocked = 0xACF5C8A9, 
			/// <summary>
			/// '{0}' is not a valid domain name.
			/// </summary>
			InvalidDomainName = 0xA4AADD36, 
			/// <summary>
			/// The service was expected to return {1} responses of type '{0}', but {2} responses were received.
			/// </summary>
			TooFewServiceReponsesReturned = 0x2A538AE5, 
			/// <summary>
			/// Status events can't be subscribed to.
			/// </summary>
			CannotSubscribeToStatusEvents = 0x1B9FE7B9, 
			/// <summary>
			/// Specified SortBy property '{0}' is invalid.
			/// </summary>
			InvalidSortByPropertyForMailboxSearch = 0x3F951D24, 
			/// <summary>
			/// The expected XML node type was {0}, but the actual type is {1}.
			/// </summary>
			UnexpectedElementType = 0x7D37DB2F, 
			/// <summary>
			/// The value must be greater than 0.
			/// </summary>
			ValueMustBeGreaterThanZero = 0x2932E12E, 
			/// <summary>
			/// Attachments can't be updated.
			/// </summary>
			AttachmentCannotBeUpdated = 0x88A42500, 
			/// <summary>
			/// This operation can't be performed because at least one item already has an ID.
			/// </summary>
			CreateItemsDoesNotHandleExistingItems = 0xE9320D99, 
			/// <summary>
			/// This operation only allows at most 1 file attachment with IsContactPhoto set.
			/// </summary>
			MultipleContactPhotosInAttachment = 0xB0DABCAD, 
			/// <summary>
			/// Invalid recurrence range: ({0}).
			/// </summary>
			InvalidRecurrenceRange = 0xC9E9A578, 
			/// <summary>
			/// Can't set both impersonated user and privileged user in the ExchangeService object.
			/// </summary>
			CannotSetBothImpersonatedAndPrivilegedUser = 0xFAFD3A76, 
			/// <summary>
			/// New messages with attachments can't be sent directly. You must first save the message and then send it.
			/// </summary>
			NewMessagesWithAttachmentsCannotBeSentDirectly = 0x5D519B6C, 
			/// <summary>
			/// The connection is already closed.
			/// </summary>
			CannotCallDisconnectWithNoLiveConnection = 0xD891AB3E, 
			/// <summary>
			/// The Id property must be set.
			/// </summary>
			IdPropertyMustBeSet = 0xEAE01EC6, 
			/// <summary>
			/// You must assign this property before you can read its value.
			/// </summary>
			ValuePropertyNotAssigned = 0x5D26C8F5, 
			/// <summary>
			/// The array must contain at least one element.
			/// </summary>
			ZeroLengthArrayInvalid = 0xF2109C7C, 
			/// <summary>
			/// The hold mailboxes parameter is not specified.
			/// </summary>
			HoldMailboxesParameterIsNotSpecified = 0xC76F1935, 
			/// <summary>
			/// Calling Save isn't allowed because this user configuration isn't new. To apply local changes to this user configuration, call Update instead.
			/// </summary>
			CannotSaveNotNewUserConfiguration = 0x875232CC, 
			/// <summary>
			/// This operation can't be performed because this service object doesn't have an Id.
			/// </summary>
			ServiceObjectDoesNotHaveId = 0x7DD64947, 
			/// <summary>
			/// The collection returned by the service has a different size from the current one.
			/// </summary>
			PropertyCollectionSizeMismatch = 0x1D4BFF0A, 
			/// <summary>
			/// The specified xsDuration argument couldn't be parsed.
			/// </summary>
			XsDurationCouldNotBeParsed = 0xAA8E93F3, 
			/// <summary>
			/// Unknown time zone transition type: {0}
			/// </summary>
			UnknownTimeZonePeriodTransitionType = 0x87D83F11, 
		}

		/// <summary>
		/// Subscriptions can't be removed from an open connection.
		/// </summary>
		public static LocalizedString CannotRemoveSubscriptionFromLiveConnection
		{
			get { return new LocalizedString("CannotRemoveSubscriptionFromLiveConnection", ResourceManager); }
		}
		/// <summary>
		/// The Permission read access value {0} can't be used with a non-calendar folder.
		/// </summary>
		public static LocalizedString ReadAccessInvalidForNonCalendarFolder
		{
			get { return new LocalizedString("ReadAccessInvalidForNonCalendarFolder", ResourceManager); }
		}
		/// <summary>
		/// The PropertyDefinition property must be set.
		/// </summary>
		public static LocalizedString PropertyDefinitionPropertyMustBeSet
		{
			get { return new LocalizedString("PropertyDefinitionPropertyMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// The string argument contains only white space characters.
		/// </summary>
		public static LocalizedString ArgumentIsBlankString
		{
			get { return new LocalizedString("ArgumentIsBlankString", ResourceManager); }
		}
		/// <summary>
		/// At least one domain name must be requested.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverDomainsCount
		{
			get { return new LocalizedString("InvalidAutodiscoverDomainsCount", ResourceManager); }
		}
		/// <summary>
		/// minutes must be between 0 and 1439, inclusive.
		/// </summary>
		public static LocalizedString MinutesMustBeBetween0And1439
		{
			get { return new LocalizedString("MinutesMustBeBetween0And1439", ResourceManager); }
		}
		/// <summary>
		/// This user configuration object can't be deleted because it's never been saved.
		/// </summary>
		public static LocalizedString DeleteInvalidForUnsavedUserConfiguration
		{
			get { return new LocalizedString("DeleteInvalidForUnsavedUserConfiguration", ResourceManager); }
		}
		/// <summary>
		/// Invalid transition. A period with the specified Id couldn't be found: {0}
		/// </summary>
		public static LocalizedString PeriodNotFound
		{
			get { return new LocalizedString("PeriodNotFound", ResourceManager); }
		}
		/// <summary>
		/// A valid SMTP address must be specified.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverSmtpAddress
		{
			get { return new LocalizedString("InvalidAutodiscoverSmtpAddress", ResourceManager); }
		}
		/// <summary>
		/// The given token is invalid.
		/// </summary>
		public static LocalizedString InvalidOAuthToken
		{
			get { return new LocalizedString("InvalidOAuthToken", ResourceManager); }
		}
		/// <summary>
		/// The number of SCP URL hops exceeded the limit.
		/// </summary>
		public static LocalizedString MaxScpHopsExceeded
		{
			get { return new LocalizedString("MaxScpHopsExceeded", ResourceManager); }
		}
		/// <summary>
		/// The contact group's Members property must be reloaded before newly-added members can be updated.
		/// </summary>
		public static LocalizedString ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst
		{
			get { return new LocalizedString("ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst", ResourceManager); }
		}
		/// <summary>
		/// The current position is not the start of an element.
		/// </summary>
		public static LocalizedString CurrentPositionNotElementStart
		{
			get { return new LocalizedString("CurrentPositionNotElementStart", ResourceManager); }
		}
		/// <summary>
		/// Unable to convert {0} from {1} to {2}.
		/// </summary>
		public static LocalizedString CannotConvertBetweenTimeZones
		{
			get { return new LocalizedString("CannotConvertBetweenTimeZones", ResourceManager); }
		}
		/// <summary>
		/// The frequency must be a value between 1 and 1440.
		/// </summary>
		public static LocalizedString FrequencyMustBeBetween1And1440
		{
			get { return new LocalizedString("FrequencyMustBeBetween1And1440", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because one or more folder permission levels were set to Custom.
		/// </summary>
		public static LocalizedString CannotSetDelegateFolderPermissionLevelToCustom
		{
			get { return new LocalizedString("CannotSetDelegateFolderPermissionLevelToCustom", ResourceManager); }
		}
		/// <summary>
		/// TryGetPartnerAccess only supports {0} or a later version in Microsoft-hosted data center.
		/// </summary>
		public static LocalizedString PartnerTokenIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("PartnerTokenIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// Invalid Autodiscover request: '{0}'
		/// </summary>
		public static LocalizedString InvalidAutodiscoverRequest
		{
			get { return new LocalizedString("InvalidAutodiscoverRequest", ResourceManager); }
		}
		/// <summary>
		/// The IAsyncResult object was not returned from the corresponding asynchronous method of the original ExchangeService object.  
		/// </summary>
		public static LocalizedString InvalidAsyncResult
		{
			get { return new LocalizedString("InvalidAsyncResult", ResourceManager); }
		}
		/// <summary>
		/// The mailbox type isn't valid.
		/// </summary>
		public static LocalizedString InvalidMailboxType
		{
			get { return new LocalizedString("InvalidMailboxType", ResourceManager); }
		}
		/// <summary>
		/// The attachment collection must be loaded.
		/// </summary>
		public static LocalizedString AttachmentCollectionNotLoaded
		{
			get { return new LocalizedString("AttachmentCollectionNotLoaded", ResourceManager); }
		}
		/// <summary>
		/// The parameter {0} is only valid for Exchange Server version {1} or a later version.
		/// </summary>
		public static LocalizedString ParameterIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("ParameterIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's DayOfWeekIndex property must be specified.
		/// </summary>
		public static LocalizedString DayOfWeekIndexMustBeSpecifiedForRecurrencePattern
		{
			get { return new LocalizedString("DayOfWeekIndexMustBeSpecifiedForRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// This type of credentials can't be used with this AutodiscoverService.
		/// </summary>
		public static LocalizedString WLIDCredentialsCannotBeUsedWithLegacyAutodiscover
		{
			get { return new LocalizedString("WLIDCredentialsCannotBeUsedWithLegacyAutodiscover", ResourceManager); }
		}
		/// <summary>
		/// This property can't be updated.
		/// </summary>
		public static LocalizedString PropertyCannotBeUpdated
		{
			get { return new LocalizedString("PropertyCannotBeUpdated", ResourceManager); }
		}
		/// <summary>
		/// Type {0} can't be used as an array of type {1}.
		/// </summary>
		public static LocalizedString IncompatibleTypeForArray
		{
			get { return new LocalizedString("IncompatibleTypeForArray", ResourceManager); }
		}
		/// <summary>
		/// PercentComplete must be between 0 and 100.
		/// </summary>
		public static LocalizedString PercentCompleteMustBeBetween0And100
		{
			get { return new LocalizedString("PercentCompleteMustBeBetween0And100", ResourceManager); }
		}
		/// <summary>
		/// The Autodiscover service only supports {0} or a later version.
		/// </summary>
		public static LocalizedString AutodiscoverServiceIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("AutodiscoverServiceIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// At least one SMTP address must be requested.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverSmtpAddressesCount
		{
			get { return new LocalizedString("InvalidAutodiscoverSmtpAddressesCount", ResourceManager); }
		}
		/// <summary>
		/// The Url property on the ExchangeService object must be set.
		/// </summary>
		public static LocalizedString ServiceUrlMustBeSet
		{
			get { return new LocalizedString("ServiceUrlMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// The item type returned by the service ({0}) isn't compatible with the requested item type ({1}).
		/// </summary>
		public static LocalizedString ItemTypeNotCompatible
		{
			get { return new LocalizedString("ItemTypeNotCompatible", ResourceManager); }
		}
		/// <summary>
		/// Can not update this attachment item since the item in the response has a different type.
		/// </summary>
		public static LocalizedString AttachmentItemTypeMismatch
		{
			get { return new LocalizedString("AttachmentItemTypeMismatch", ResourceManager); }
		}
		/// <summary>
		/// Protocol {0} isn't supported for service requests.
		/// </summary>
		public static LocalizedString UnsupportedWebProtocol
		{
			get { return new LocalizedString("UnsupportedWebProtocol", ResourceManager); }
		}
		/// <summary>
		/// Enumeration value {0} in enumeration type {1} is only valid for Exchange version {2} or later.
		/// </summary>
		public static LocalizedString EnumValueIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("EnumValueIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// An element node '{0}:{1}' of the type {2} was expected, but node '{3}' of type {4} was found.
		/// </summary>
		public static LocalizedString UnexpectedElement
		{
			get { return new LocalizedString("UnexpectedElement", ResourceManager); }
		}
		/// <summary>
		/// At least one of the property definitions in the OrderBy clause is null.
		/// </summary>
		public static LocalizedString InvalidOrderBy
		{
			get { return new LocalizedString("InvalidOrderBy", ResourceManager); }
		}
		/// <summary>
		/// No appropriate constructor could be found for this item class.
		/// </summary>
		public static LocalizedString NoAppropriateConstructorForItemClass
		{
			get { return new LocalizedString("NoAppropriateConstructorForItemClass", ResourceManager); }
		}
		/// <summary>
		/// The search filter at index {0} is invalid.
		/// </summary>
		public static LocalizedString SearchFilterAtIndexIsInvalid
		{
			get { return new LocalizedString("SearchFilterAtIndexIsInvalid", ResourceManager); }
		}
		/// <summary>
		/// Deleting this type of object isn't authorized.
		/// </summary>
		public static LocalizedString DeletingThisObjectTypeNotAuthorized
		{
			get { return new LocalizedString("DeletingThisObjectTypeNotAuthorized", ResourceManager); }
		}
		/// <summary>
		/// This property can't be deleted.
		/// </summary>
		public static LocalizedString PropertyCannotBeDeleted
		{
			get { return new LocalizedString("PropertyCannotBeDeleted", ResourceManager); }
		}
		/// <summary>
		/// The Value property must be set.
		/// </summary>
		public static LocalizedString ValuePropertyMustBeSet
		{
			get { return new LocalizedString("ValuePropertyMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// The extended property tag value must be in the range of 0 to 65,535.
		/// </summary>
		public static LocalizedString TagValueIsOutOfRange
		{
			get { return new LocalizedString("TagValueIsOutOfRange", ResourceManager); }
		}
		/// <summary>
		/// Items[{0}] is either null or does not have an Id.
		/// </summary>
		public static LocalizedString ItemToUpdateCannotBeNullOrNew
		{
			get { return new LocalizedString("ItemToUpdateCannotBeNullOrNew", ResourceManager); }
		}
		/// <summary>
		/// SearchParameters must contain at least one folder id.
		/// </summary>
		public static LocalizedString SearchParametersRootFolderIdsEmpty
		{
			get { return new LocalizedString("SearchParametersRootFolderIdsEmpty", ResourceManager); }
		}
		/// <summary>
		/// The collection of query and mailboxes parameter is not specified.
		/// </summary>
		public static LocalizedString MailboxQueriesParameterIsNotSpecified
		{
			get { return new LocalizedString("MailboxQueriesParameterIsNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// The UserId in the folder permission at index {0} is invalid. The StandardUser, PrimarySmtpAddress, or SID property must be set.
		/// </summary>
		public static LocalizedString FolderPermissionHasInvalidUserId
		{
			get { return new LocalizedString("FolderPermissionHasInvalidUserId", ResourceManager); }
		}
		/// <summary>
		/// The domain name must be specified.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverDomain
		{
			get { return new LocalizedString("InvalidAutodiscoverDomain", ResourceManager); }
		}
		/// <summary>
		/// The array of mailboxes (in legacy DN) is not specified.
		/// </summary>
		public static LocalizedString MailboxesParameterIsNotSpecified
		{
			get { return new LocalizedString("MailboxesParameterIsNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// parentFolder doesn't have an Id.
		/// </summary>
		public static LocalizedString ParentFolderDoesNotHaveId
		{
			get { return new LocalizedString("ParentFolderDoesNotHaveId", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's DayOfMonth property must be specified.
		/// </summary>
		public static LocalizedString DayOfMonthMustBeSpecifiedForRecurrencePattern
		{
			get { return new LocalizedString("DayOfMonthMustBeSpecifiedForRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// Class {0} is only valid for Exchange version {1} or later.
		/// </summary>
		public static LocalizedString ClassIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("ClassIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// The given certificate does not have the private key. The private key is necessary to sign part of the request message.
		/// </summary>
		public static LocalizedString CertificateHasNoPrivateKey
		{
			get { return new LocalizedString("CertificateHasNoPrivateKey", ResourceManager); }
		}
		/// <summary>
		/// The time zone definition is invalid or unsupported.
		/// </summary>
		public static LocalizedString InvalidOrUnsupportedTimeZoneDefinition
		{
			get { return new LocalizedString("InvalidOrUnsupportedTimeZoneDefinition", ResourceManager); }
		}
		/// <summary>
		/// Hour must be between 0 and 23.
		/// </summary>
		public static LocalizedString HourMustBeBetween0And23
		{
			get { return new LocalizedString("HourMustBeBetween0And23", ResourceManager); }
		}
		/// <summary>
		/// Timeout must be a value between 1 and 1440.
		/// </summary>
		public static LocalizedString TimeoutMustBeBetween1And1440
		{
			get { return new LocalizedString("TimeoutMustBeBetween1And1440", ResourceManager); }
		}
		/// <summary>
		/// Credentials are required to make a service request.
		/// </summary>
		public static LocalizedString CredentialsRequired
		{
			get { return new LocalizedString("CredentialsRequired", ResourceManager); }
		}
		/// <summary>
		/// You must load or assign this property before you can read its value.
		/// </summary>
		public static LocalizedString MustLoadOrAssignPropertyBeforeAccess
		{
			get { return new LocalizedString("MustLoadOrAssignPropertyBeforeAccess", ResourceManager); }
		}
		/// <summary>
		/// The Autodiscover service response was invalid.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverServiceResponse
		{
			get { return new LocalizedString("InvalidAutodiscoverServiceResponse", ResourceManager); }
		}
		/// <summary>
		/// The connection has already opened.
		/// </summary>
		public static LocalizedString CannotCallConnectDuringLiveConnection
		{
			get { return new LocalizedString("CannotCallConnectDuringLiveConnection", ResourceManager); }
		}
		/// <summary>
		/// This service object doesn't have an ID.
		/// </summary>
		public static LocalizedString ObjectDoesNotHaveId
		{
			get { return new LocalizedString("ObjectDoesNotHaveId", ResourceManager); }
		}
		/// <summary>
		/// Subscriptions can't be added to an open connection.
		/// </summary>
		public static LocalizedString CannotAddSubscriptionToLiveConnection
		{
			get { return new LocalizedString("CannotAddSubscriptionToLiveConnection", ResourceManager); }
		}
		/// <summary>
		/// MaxChangesReturned must be between 1 and 512.
		/// </summary>
		public static LocalizedString MaxChangesMustBeBetween1And512
		{
			get { return new LocalizedString("MaxChangesMustBeBetween1And512", ResourceManager); }
		}
		/// <summary>
		/// Values of type '{0}' can't be used for the '{1}' attribute.
		/// </summary>
		public static LocalizedString AttributeValueCannotBeSerialized
		{
			get { return new LocalizedString("AttributeValueCannotBeSerialized", ResourceManager); }
		}
		/// <summary>
		/// NumberOfDays must be zero or greater. Zero indicates no limit.
		/// </summary>
		public static LocalizedString NumberOfDaysMustBePositive
		{
			get { return new LocalizedString("NumberOfDaysMustBePositive", ResourceManager); }
		}
		/// <summary>
		/// The SearchFilter property must be set.
		/// </summary>
		public static LocalizedString SearchFilterMustBeSet
		{
			get { return new LocalizedString("SearchFilterMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// EndDate must be greater than StartDate.
		/// </summary>
		public static LocalizedString EndDateMustBeGreaterThanStartDate
		{
			get { return new LocalizedString("EndDateMustBeGreaterThanStartDate", ResourceManager); }
		}
		/// <summary>
		/// Invalid date and time: {0}.
		/// </summary>
		public static LocalizedString InvalidDateTime
		{
			get { return new LocalizedString("InvalidDateTime", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because attachments have been added or deleted for one or more items.
		/// </summary>
		public static LocalizedString UpdateItemsDoesNotAllowAttachments
		{
			get { return new LocalizedString("UpdateItemsDoesNotAllowAttachments", ResourceManager); }
		}
		/// <summary>
		/// Timeout must be greater than zero.
		/// </summary>
		public static LocalizedString TimeoutMustBeGreaterThanZero
		{
			get { return new LocalizedString("TimeoutMustBeGreaterThanZero", ResourceManager); }
		}
		/// <summary>
		/// The requested setting, '{0}', isn't supported by this Autodiscover endpoint.
		/// </summary>
		public static LocalizedString AutodiscoverInvalidSettingForOutlookProvider
		{
			get { return new LocalizedString("AutodiscoverInvalidSettingForOutlookProvider", ResourceManager); }
		}
		/// <summary>
		/// The service returned an invalid redirection response.
		/// </summary>
		public static LocalizedString InvalidRedirectionResponseReturned
		{
			get { return new LocalizedString("InvalidRedirectionResponseReturned", ResourceManager); }
		}
		/// <summary>
		/// The start element was expected, but node '{0}' of type {1} was found.
		/// </summary>
		public static LocalizedString ExpectedStartElement
		{
			get { return new LocalizedString("ExpectedStartElement", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's property DaysOfTheWeek must contain at least one day of the week.
		/// </summary>
		public static LocalizedString DaysOfTheWeekNotSpecified
		{
			get { return new LocalizedString("DaysOfTheWeekNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// Folders[{0}] is either null or does not have an Id.
		/// </summary>
		public static LocalizedString FolderToUpdateCannotBeNullOrNew
		{
			get { return new LocalizedString("FolderToUpdateCannotBeNullOrNew", ResourceManager); }
		}
		/// <summary>
		/// TryGetPartnerAccess request requires the Url be set with the partner's autodiscover url first.
		/// </summary>
		public static LocalizedString PartnerTokenRequestRequiresUrl
		{
			get { return new LocalizedString("PartnerTokenRequestRequiresUrl", ResourceManager); }
		}
		/// <summary>
		/// NumberOfOccurrences must be greater than 0.
		/// </summary>
		public static LocalizedString NumberOfOccurrencesMustBeGreaterThanZero
		{
			get { return new LocalizedString("NumberOfOccurrencesMustBeGreaterThanZero", ResourceManager); }
		}
		/// <summary>
		/// JSON Serialization is not implemented for this request. Please retry the request with the XML rendering method.
		/// </summary>
		public static LocalizedString JsonSerializationNotImplemented
		{
			get { return new LocalizedString("JsonSerializationNotImplemented", ResourceManager); }
		}
		/// <summary>
		/// StartTimeZone required when setting the Start, End, IsAllDayEvent, or Recurrence properties.  You must load or assign this property before attempting to update the appointment.
		/// </summary>
		public static LocalizedString StartTimeZoneRequired
		{
			get { return new LocalizedString("StartTimeZoneRequired", ResourceManager); }
		}
		/// <summary>
		/// Property {0} already exists in OrderByCollection.
		/// </summary>
		public static LocalizedString PropertyAlreadyExistsInOrderByCollection
		{
			get { return new LocalizedString("PropertyAlreadyExistsInOrderByCollection", ResourceManager); }
		}
		/// <summary>
		/// The name of the item attachment at index {0} must be set.
		/// </summary>
		public static LocalizedString ItemAttachmentMustBeNamed
		{
			get { return new LocalizedString("ItemAttachmentMustBeNamed", ResourceManager); }
		}
		/// <summary>
		/// At least one setting must be requested.
		/// </summary>
		public static LocalizedString InvalidAutodiscoverSettingsCount
		{
			get { return new LocalizedString("InvalidAutodiscoverSettingsCount", ResourceManager); }
		}
		/// <summary>
		/// Loading this type of object is not supported.
		/// </summary>
		public static LocalizedString LoadingThisObjectTypeNotSupported
		{
			get { return new LocalizedString("LoadingThisObjectTypeNotSupported", ResourceManager); }
		}
		/// <summary>
		/// The UserId in the DelegateUser hasn't been specified.
		/// </summary>
		public static LocalizedString UserIdForDelegateUserNotSpecified
		{
			get { return new LocalizedString("UserIdForDelegateUserNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// The phone call has already been disconnected.
		/// </summary>
		public static LocalizedString PhoneCallAlreadyDisconnected
		{
			get { return new LocalizedString("PhoneCallAlreadyDisconnected", ResourceManager); }
		}
		/// <summary>
		/// This operation isn't supported on attachments.
		/// </summary>
		public static LocalizedString OperationDoesNotSupportAttachments
		{
			get { return new LocalizedString("OperationDoesNotSupportAttachments", ResourceManager); }
		}
		/// <summary>
		/// The time zone transition target isn't supported.
		/// </summary>
		public static LocalizedString UnsupportedTimeZonePeriodTransitionTarget
		{
			get { return new LocalizedString("UnsupportedTimeZonePeriodTransitionTarget", ResourceManager); }
		}
		/// <summary>
		/// The IEnumerable doesn't contain that many objects.
		/// </summary>
		public static LocalizedString IEnumerableDoesNotContainThatManyObject
		{
			get { return new LocalizedString("IEnumerableDoesNotContainThatManyObject", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because one or more items are new or unmodified.
		/// </summary>
		public static LocalizedString UpdateItemsDoesNotSupportNewOrUnchangedItems
		{
			get { return new LocalizedString("UpdateItemsDoesNotSupportNewOrUnchangedItems", ResourceManager); }
		}
		/// <summary>
		/// Validation failed.
		/// </summary>
		public static LocalizedString ValidationFailed
		{
			get { return new LocalizedString("ValidationFailed", ResourceManager); }
		}
		/// <summary>
		/// Invalid recurrence pattern: ({0}).
		/// </summary>
		public static LocalizedString InvalidRecurrencePattern
		{
			get { return new LocalizedString("InvalidRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// The time window's end time must be greater than its start time.
		/// </summary>
		public static LocalizedString TimeWindowStartTimeMustBeGreaterThanEndTime
		{
			get { return new LocalizedString("TimeWindowStartTimeMustBeGreaterThanEndTime", ResourceManager); }
		}
		/// <summary>
		/// The invalid value '{0}' was specified for the '{1}' attribute.
		/// </summary>
		public static LocalizedString InvalidAttributeValue
		{
			get { return new LocalizedString("InvalidAttributeValue", ResourceManager); }
		}
		/// <summary>
		/// The content of the file attachment at index {0} must be set.
		/// </summary>
		public static LocalizedString FileAttachmentContentIsNotSet
		{
			get { return new LocalizedString("FileAttachmentContentIsNotSet", ResourceManager); }
		}
		/// <summary>
		/// The Autodiscover service didn't return an appropriate URL that can be used for the ExchangeService Autodiscover URL.
		/// </summary>
		public static LocalizedString AutodiscoverDidNotReturnEwsUrl
		{
			get { return new LocalizedString("AutodiscoverDidNotReturnEwsUrl", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's StartDate property must be specified.
		/// </summary>
		public static LocalizedString RecurrencePatternMustHaveStartDate
		{
			get { return new LocalizedString("RecurrencePatternMustHaveStartDate", ResourceManager); }
		}
		/// <summary>
		/// OccurrenceIndex must be greater than 0.
		/// </summary>
		public static LocalizedString OccurrenceIndexMustBeGreaterThanZero
		{
			get { return new LocalizedString("OccurrenceIndexMustBeGreaterThanZero", ResourceManager); }
		}
		/// <summary>
		/// The response received from the service didn't contain valid XML.
		/// </summary>
		public static LocalizedString ServiceResponseDoesNotContainXml
		{
			get { return new LocalizedString("ServiceResponseDoesNotContainXml", ResourceManager); }
		}
		/// <summary>
		/// The operation can't be performed because the item is out of date. Reload the item and try again.
		/// </summary>
		public static LocalizedString ItemIsOutOfDate
		{
			get { return new LocalizedString("ItemIsOutOfDate", ResourceManager); }
		}
		/// <summary>
		/// Minute must be between 0 and 59.
		/// </summary>
		public static LocalizedString MinuteMustBeBetween0And59
		{
			get { return new LocalizedString("MinuteMustBeBetween0And59", ResourceManager); }
		}
		/// <summary>
		/// No appropriate Autodiscover SOAP or WS-Security endpoint is available.
		/// </summary>
		public static LocalizedString NoSoapOrWsSecurityEndpointAvailable
		{
			get { return new LocalizedString("NoSoapOrWsSecurityEndpointAvailable", ResourceManager); }
		}
		/// <summary>
		/// The element '{0}' in namespace '{1}' wasn't found at the current position.
		/// </summary>
		public static LocalizedString ElementNotFound
		{
			get { return new LocalizedString("ElementNotFound", ResourceManager); }
		}
		/// <summary>
		/// index is out of range.
		/// </summary>
		public static LocalizedString IndexIsOutOfRange
		{
			get { return new LocalizedString("IndexIsOutOfRange", ResourceManager); }
		}
		/// <summary>
		/// This property is read-only and can't be set.
		/// </summary>
		public static LocalizedString PropertyIsReadOnly
		{
			get { return new LocalizedString("PropertyIsReadOnly", ResourceManager); }
		}
		/// <summary>
		/// At least one attachment couldn't be created.
		/// </summary>
		public static LocalizedString AttachmentCreationFailed
		{
			get { return new LocalizedString("AttachmentCreationFailed", ResourceManager); }
		}
		/// <summary>
		/// DayOfMonth must be between 1 and 31.
		/// </summary>
		public static LocalizedString DayOfMonthMustBeBetween1And31
		{
			get { return new LocalizedString("DayOfMonthMustBeBetween1And31", ResourceManager); }
		}
		/// <summary>
		/// The request failed. {0}
		/// </summary>
		public static LocalizedString ServiceRequestFailed
		{
			get { return new LocalizedString("ServiceRequestFailed", ResourceManager); }
		}
		/// <summary>
		/// The UserId in the DelegateUser is invalid. The StandardUser, PrimarySmtpAddress or SID property must be set.
		/// </summary>
		public static LocalizedString DelegateUserHasInvalidUserId
		{
			get { return new LocalizedString("DelegateUserHasInvalidUserId", ResourceManager); }
		}
		/// <summary>
		/// Values of type '{0}' can't be used as comparison values in search filters.
		/// </summary>
		public static LocalizedString SearchFilterComparisonValueTypeIsNotSupported
		{
			get { return new LocalizedString("SearchFilterComparisonValueTypeIsNotSupported", ResourceManager); }
		}
		/// <summary>
		/// Values of type '{0}' can't be used for the '{1}' element.
		/// </summary>
		public static LocalizedString ElementValueCannotBeSerialized
		{
			get { return new LocalizedString("ElementValueCannotBeSerialized", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's {0} property must be specified.
		/// </summary>
		public static LocalizedString PropertyValueMustBeSpecifiedForRecurrencePattern
		{
			get { return new LocalizedString("PropertyValueMustBeSpecifiedForRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// The property {0} can't be used in {1} requests.
		/// </summary>
		public static LocalizedString NonSummaryPropertyCannotBeUsed
		{
			get { return new LocalizedString("NonSummaryPropertyCannotBeUsed", ResourceManager); }
		}
		/// <summary>
		/// The hold id parameter is not specified.
		/// </summary>
		public static LocalizedString HoldIdParameterIsNotSpecified
		{
			get { return new LocalizedString("HoldIdParameterIsNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// Invalid transition. A transition group with the specified ID couldn't be found: {0}
		/// </summary>
		public static LocalizedString TransitionGroupNotFound
		{
			get { return new LocalizedString("TransitionGroupNotFound", ResourceManager); }
		}
		/// <summary>
		/// Objects of type {0} can't be added to the dictionary. The following types are supported: string array, byte array, boolean, byte, DateTime, integer, long, string, unsigned integer, and unsigned long.
		/// </summary>
		public static LocalizedString ObjectTypeNotSupported
		{
			get { return new LocalizedString("ObjectTypeNotSupported", ResourceManager); }
		}
		/// <summary>
		/// {0} is not a valid timeout value. Valid values range from 1 to 1440.
		/// </summary>
		public static LocalizedString InvalidTimeoutValue
		{
			get { return new LocalizedString("InvalidTimeoutValue", ResourceManager); }
		}
		/// <summary>
		/// Autodiscover blocked a potentially insecure redirection to {0}. To allow Autodiscover to follow the redirection, use the AutodiscoverUrl(string, AutodiscoverRedirectionUrlValidationCallback) overload.
		/// </summary>
		public static LocalizedString AutodiscoverRedirectBlocked
		{
			get { return new LocalizedString("AutodiscoverRedirectBlocked", ResourceManager); }
		}
		/// <summary>
		/// This PropertySet is read-only and can't be modified.
		/// </summary>
		public static LocalizedString PropertySetCannotBeModified
		{
			get { return new LocalizedString("PropertySetCannotBeModified", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's property DayOfTheWeek must be specified.
		/// </summary>
		public static LocalizedString DayOfTheWeekMustBeSpecifiedForRecurrencePattern
		{
			get { return new LocalizedString("DayOfTheWeekMustBeSpecifiedForRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because this service object already has an ID. To update this service object, use the Update() method instead.
		/// </summary>
		public static LocalizedString ServiceObjectAlreadyHasId
		{
			get { return new LocalizedString("ServiceObjectAlreadyHasId", ResourceManager); }
		}
		/// <summary>
		/// Method {0} is only valid for Exchange Server version {1} or later.
		/// </summary>
		public static LocalizedString MethodIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("MethodIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// This operation isn't supported for property definition type {0}.
		/// </summary>
		public static LocalizedString OperationNotSupportedForPropertyDefinitionType
		{
			get { return new LocalizedString("OperationNotSupportedForPropertyDefinitionType", ResourceManager); }
		}
		/// <summary>
		/// The invalid value '{0}' was specified for the '{1}' element.
		/// </summary>
		public static LocalizedString InvalidElementStringValue
		{
			get { return new LocalizedString("InvalidElementStringValue", ResourceManager); }
		}
		/// <summary>
		/// The collection is empty.
		/// </summary>
		public static LocalizedString CollectionIsEmpty
		{
			get { return new LocalizedString("CollectionIsEmpty", ResourceManager); }
		}
		/// <summary>
		/// {0} is not a valid frequency value. Valid values range from 1 to 1440.
		/// </summary>
		public static LocalizedString InvalidFrequencyValue
		{
			get { return new LocalizedString("InvalidFrequencyValue", ResourceManager); }
		}
		/// <summary>
		/// The XML document ended unexpectedly.
		/// </summary>
		public static LocalizedString UnexpectedEndOfXmlDocument
		{
			get { return new LocalizedString("UnexpectedEndOfXmlDocument", ResourceManager); }
		}
		/// <summary>
		/// The folder type returned by the service ({0}) isn't compatible with the requested folder type ({1}).
		/// </summary>
		public static LocalizedString FolderTypeNotCompatible
		{
			get { return new LocalizedString("FolderTypeNotCompatible", ResourceManager); }
		}
		/// <summary>
		/// The service request {0} is only valid for Exchange version {1} or later.
		/// </summary>
		public static LocalizedString RequestIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("RequestIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// Can not update the existing collection item since the item in the response has a different type.
		/// </summary>
		public static LocalizedString PropertyTypeIncompatibleWhenUpdatingCollection
		{
			get { return new LocalizedString("PropertyTypeIncompatibleWhenUpdatingCollection", ResourceManager); }
		}
		/// <summary>
		/// Exchange Server doesn't support the requested version.
		/// </summary>
		public static LocalizedString ServerVersionNotSupported
		{
			get { return new LocalizedString("ServerVersionNotSupported", ResourceManager); }
		}
		/// <summary>
		/// Duration must be specified when State is equal to Scheduled.
		/// </summary>
		public static LocalizedString DurationMustBeSpecifiedWhenScheduled
		{
			get { return new LocalizedString("DurationMustBeSpecifiedWhenScheduled", ResourceManager); }
		}
		/// <summary>
		/// No error.
		/// </summary>
		public static LocalizedString NoError
		{
			get { return new LocalizedString("NoError", ResourceManager); }
		}
		/// <summary>
		/// This user configuration can't be updated because it's never been saved.
		/// </summary>
		public static LocalizedString CannotUpdateNewUserConfiguration
		{
			get { return new LocalizedString("CannotUpdateNewUserConfiguration", ResourceManager); }
		}
		/// <summary>
		/// The object type {0} is only valid for Exchange Server version {1} or later versions.
		/// </summary>
		public static LocalizedString ObjectTypeIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("ObjectTypeIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// The array contains at least one null element.
		/// </summary>
		public static LocalizedString NullStringArrayElementInvalid
		{
			get { return new LocalizedString("NullStringArrayElementInvalid", ResourceManager); }
		}
		/// <summary>
		/// Https is required when partner token is expected.
		/// </summary>
		public static LocalizedString HttpsIsRequired
		{
			get { return new LocalizedString("HttpsIsRequired", ResourceManager); }
		}
		/// <summary>
		/// MergedFreeBusyInterval must be smaller than the specified time window.
		/// </summary>
		public static LocalizedString MergedFreeBusyIntervalMustBeSmallerThanTimeWindow
		{
			get { return new LocalizedString("MergedFreeBusyIntervalMustBeSmallerThanTimeWindow", ResourceManager); }
		}
		/// <summary>
		/// Second must be between 0 and 59.
		/// </summary>
		public static LocalizedString SecondMustBeBetween0And59
		{
			get { return new LocalizedString("SecondMustBeBetween0And59", ResourceManager); }
		}
		/// <summary>
		/// At least one attachment couldn't be deleted.
		/// </summary>
		public static LocalizedString AtLeastOneAttachmentCouldNotBeDeleted
		{
			get { return new LocalizedString("AtLeastOneAttachmentCouldNotBeDeleted", ResourceManager); }
		}
		/// <summary>
		/// The ID is already in the list.
		/// </summary>
		public static LocalizedString IdAlreadyInList
		{
			get { return new LocalizedString("IdAlreadyInList", ResourceManager); }
		}
		/// <summary>
		/// Both search filter and query string can't be specified. One of them must be null.
		/// </summary>
		public static LocalizedString BothSearchFilterAndQueryStringCannotBeSpecified
		{
			get { return new LocalizedString("BothSearchFilterAndQueryStringCannotBeSpecified", ResourceManager); }
		}
		/// <summary>
		/// The additional property at index {0} is null.
		/// </summary>
		public static LocalizedString AdditionalPropertyIsNull
		{
			get { return new LocalizedString("AdditionalPropertyIsNull", ResourceManager); }
		}
		/// <summary>
		/// The e-mail address is formed incorrectly.
		/// </summary>
		public static LocalizedString InvalidEmailAddress
		{
			get { return new LocalizedString("InvalidEmailAddress", ResourceManager); }
		}
		/// <summary>
		/// The maximum redirection hop count has been reached.
		/// </summary>
		public static LocalizedString MaximumRedirectionHopsExceeded
		{
			get { return new LocalizedString("MaximumRedirectionHopsExceeded", ResourceManager); }
		}
		/// <summary>
		/// The Autodiscover service couldn't be located.
		/// </summary>
		public static LocalizedString AutodiscoverCouldNotBeLocated
		{
			get { return new LocalizedString("AutodiscoverCouldNotBeLocated", ResourceManager); }
		}
		/// <summary>
		/// You must add at least one subscription to this connection before it can be opened.
		/// </summary>
		public static LocalizedString NoSubscriptionsOnConnection
		{
			get { return new LocalizedString("NoSubscriptionsOnConnection", ResourceManager); }
		}
		/// <summary>
		/// The Permission level value {0} can't be used with a non-calendar folder.
		/// </summary>
		public static LocalizedString PermissionLevelInvalidForNonCalendarFolder
		{
			get { return new LocalizedString("PermissionLevelInvalidForNonCalendarFolder", ResourceManager); }
		}
		/// <summary>
		/// The token auth scheme should be bearer.
		/// </summary>
		public static LocalizedString InvalidAuthScheme
		{
			get { return new LocalizedString("InvalidAuthScheme", ResourceManager); }
		}
		/// <summary>
		/// JSON Deserialization is not implemented for this request. Please retry the request with the XML rendering method.
		/// </summary>
		public static LocalizedString JsonDeserializationNotImplemented
		{
			get { return new LocalizedString("JsonDeserializationNotImplemented", ResourceManager); }
		}
		/// <summary>
		/// This property was requested, but it wasn't returned by the server.
		/// </summary>
		public static LocalizedString ValuePropertyNotLoaded
		{
			get { return new LocalizedString("ValuePropertyNotLoaded", ResourceManager); }
		}
		/// <summary>
		/// The property {0} is valid only for Exchange {1} or later versions.
		/// </summary>
		public static LocalizedString PropertyIncompatibleWithRequestVersion
		{
			get { return new LocalizedString("PropertyIncompatibleWithRequestVersion", ResourceManager); }
		}
		/// <summary>
		/// The offset must be greater than 0.
		/// </summary>
		public static LocalizedString OffsetMustBeGreaterThanZero
		{
			get { return new LocalizedString("OffsetMustBeGreaterThanZero", ResourceManager); }
		}
		/// <summary>
		/// This operation doesn't support items that have attachments.
		/// </summary>
		public static LocalizedString CreateItemsDoesNotAllowAttachments
		{
			get { return new LocalizedString("CreateItemsDoesNotAllowAttachments", ResourceManager); }
		}
		/// <summary>
		/// Property definition type '{0}' and type parameter '{1}' aren't compatible.
		/// </summary>
		public static LocalizedString PropertyDefinitionTypeMismatch
		{
			get { return new LocalizedString("PropertyDefinitionTypeMismatch", ResourceManager); }
		}
		/// <summary>
		/// The interval must be greater than or equal to 1.
		/// </summary>
		public static LocalizedString IntervalMustBeGreaterOrEqualToOne
		{
			get { return new LocalizedString("IntervalMustBeGreaterOrEqualToOne", ResourceManager); }
		}
		/// <summary>
		/// The PermissionLevel property can't be set to FolderPermissionLevel.Custom. To define a custom permission, set its individual properties to the values you want.
		/// </summary>
		public static LocalizedString CannotSetPermissionLevelToCustom
		{
			get { return new LocalizedString("CannotSetPermissionLevelToCustom", ResourceManager); }
		}
		/// <summary>
		/// HTTP header '{0}' isn't permitted. Only HTTP headers with the 'X-' prefix are permitted.
		/// </summary>
		public static LocalizedString CannotAddRequestHeader
		{
			get { return new LocalizedString("CannotAddRequestHeader", ResourceManager); }
		}
		/// <summary>
		/// The Array value must have at least one element.
		/// </summary>
		public static LocalizedString ArrayMustHaveAtLeastOneElement
		{
			get { return new LocalizedString("ArrayMustHaveAtLeastOneElement", ResourceManager); }
		}
		/// <summary>
		/// The recurrence pattern's Month property must be specified.
		/// </summary>
		public static LocalizedString MonthMustBeSpecifiedForRecurrencePattern
		{
			get { return new LocalizedString("MonthMustBeSpecifiedForRecurrencePattern", ResourceManager); }
		}
		/// <summary>
		/// The value '{0}' of type {1} can't be converted to a value of type {2}.
		/// </summary>
		public static LocalizedString ValueOfTypeCannotBeConverted
		{
			get { return new LocalizedString("ValueOfTypeCannotBeConverted", ResourceManager); }
		}
		/// <summary>
		/// The value '{0}' couldn't be converted to type {1}.
		/// </summary>
		public static LocalizedString ValueCannotBeConverted
		{
			get { return new LocalizedString("ValueCannotBeConverted", ResourceManager); }
		}
		/// <summary>
		/// {0} -- Server Error: {1}: {2} {3}
		/// </summary>
		public static LocalizedString ServerErrorAndStackTraceDetails
		{
			get { return new LocalizedString("ServerErrorAndStackTraceDetails", ResourceManager); }
		}
		/// <summary>
		/// The permission level of the folder permission at index {0} must be set.
		/// </summary>
		public static LocalizedString FolderPermissionLevelMustBeSet
		{
			get { return new LocalizedString("FolderPermissionLevelMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// The Autodiscover service returned an error.
		/// </summary>
		public static LocalizedString AutodiscoverError
		{
			get { return new LocalizedString("AutodiscoverError", ResourceManager); }
		}
		/// <summary>
		/// The array value must have a single dimension.
		/// </summary>
		public static LocalizedString ArrayMustHaveSingleDimension
		{
			get { return new LocalizedString("ArrayMustHaveSingleDimension", ResourceManager); }
		}
		/// <summary>
		/// {0} must be between {1} and {2}.
		/// </summary>
		public static LocalizedString InvalidPropertyValueNotInRange
		{
			get { return new LocalizedString("InvalidPropertyValueNotInRange", ResourceManager); }
		}
		/// <summary>
		/// Regeneration patterns can only be used with Task items.
		/// </summary>
		public static LocalizedString RegenerationPatternsOnlyValidForTasks
		{
			get { return new LocalizedString("RegenerationPatternsOnlyValidForTasks", ResourceManager); }
		}
		/// <summary>
		/// Item attachments can't be updated.
		/// </summary>
		public static LocalizedString ItemAttachmentCannotBeUpdated
		{
			get { return new LocalizedString("ItemAttachmentCannotBeUpdated", ResourceManager); }
		}
		/// <summary>
		/// Either the OtherPropertyDefinition or the Value properties must be set.
		/// </summary>
		public static LocalizedString EqualityComparisonFilterIsInvalid
		{
			get { return new LocalizedString("EqualityComparisonFilterIsInvalid", ResourceManager); }
		}
		/// <summary>
		/// This Autodiscover request requires that either the Domain or Url be specified.
		/// </summary>
		public static LocalizedString AutodiscoverServiceRequestRequiresDomainOrUrl
		{
			get { return new LocalizedString("AutodiscoverServiceRequestRequiresDomainOrUrl", ResourceManager); }
		}
		/// <summary>
		/// Invalid user: '{0}'
		/// </summary>
		public static LocalizedString InvalidUser
		{
			get { return new LocalizedString("InvalidUser", ResourceManager); }
		}
		/// <summary>
		/// This account is locked. Visit {0} to unlock it.
		/// </summary>
		public static LocalizedString AccountIsLocked
		{
			get { return new LocalizedString("AccountIsLocked", ResourceManager); }
		}
		/// <summary>
		/// '{0}' is not a valid domain name.
		/// </summary>
		public static LocalizedString InvalidDomainName
		{
			get { return new LocalizedString("InvalidDomainName", ResourceManager); }
		}
		/// <summary>
		/// The service was expected to return {1} responses of type '{0}', but {2} responses were received.
		/// </summary>
		public static LocalizedString TooFewServiceReponsesReturned
		{
			get { return new LocalizedString("TooFewServiceReponsesReturned", ResourceManager); }
		}
		/// <summary>
		/// Status events can't be subscribed to.
		/// </summary>
		public static LocalizedString CannotSubscribeToStatusEvents
		{
			get { return new LocalizedString("CannotSubscribeToStatusEvents", ResourceManager); }
		}
		/// <summary>
		/// Specified SortBy property '{0}' is invalid.
		/// </summary>
		public static LocalizedString InvalidSortByPropertyForMailboxSearch
		{
			get { return new LocalizedString("InvalidSortByPropertyForMailboxSearch", ResourceManager); }
		}
		/// <summary>
		/// The expected XML node type was {0}, but the actual type is {1}.
		/// </summary>
		public static LocalizedString UnexpectedElementType
		{
			get { return new LocalizedString("UnexpectedElementType", ResourceManager); }
		}
		/// <summary>
		/// The value must be greater than 0.
		/// </summary>
		public static LocalizedString ValueMustBeGreaterThanZero
		{
			get { return new LocalizedString("ValueMustBeGreaterThanZero", ResourceManager); }
		}
		/// <summary>
		/// Attachments can't be updated.
		/// </summary>
		public static LocalizedString AttachmentCannotBeUpdated
		{
			get { return new LocalizedString("AttachmentCannotBeUpdated", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because at least one item already has an ID.
		/// </summary>
		public static LocalizedString CreateItemsDoesNotHandleExistingItems
		{
			get { return new LocalizedString("CreateItemsDoesNotHandleExistingItems", ResourceManager); }
		}
		/// <summary>
		/// This operation only allows at most 1 file attachment with IsContactPhoto set.
		/// </summary>
		public static LocalizedString MultipleContactPhotosInAttachment
		{
			get { return new LocalizedString("MultipleContactPhotosInAttachment", ResourceManager); }
		}
		/// <summary>
		/// Invalid recurrence range: ({0}).
		/// </summary>
		public static LocalizedString InvalidRecurrenceRange
		{
			get { return new LocalizedString("InvalidRecurrenceRange", ResourceManager); }
		}
		/// <summary>
		/// Can't set both impersonated user and privileged user in the ExchangeService object.
		/// </summary>
		public static LocalizedString CannotSetBothImpersonatedAndPrivilegedUser
		{
			get { return new LocalizedString("CannotSetBothImpersonatedAndPrivilegedUser", ResourceManager); }
		}
		/// <summary>
		/// New messages with attachments can't be sent directly. You must first save the message and then send it.
		/// </summary>
		public static LocalizedString NewMessagesWithAttachmentsCannotBeSentDirectly
		{
			get { return new LocalizedString("NewMessagesWithAttachmentsCannotBeSentDirectly", ResourceManager); }
		}
		/// <summary>
		/// The connection is already closed.
		/// </summary>
		public static LocalizedString CannotCallDisconnectWithNoLiveConnection
		{
			get { return new LocalizedString("CannotCallDisconnectWithNoLiveConnection", ResourceManager); }
		}
		/// <summary>
		/// The Id property must be set.
		/// </summary>
		public static LocalizedString IdPropertyMustBeSet
		{
			get { return new LocalizedString("IdPropertyMustBeSet", ResourceManager); }
		}
		/// <summary>
		/// You must assign this property before you can read its value.
		/// </summary>
		public static LocalizedString ValuePropertyNotAssigned
		{
			get { return new LocalizedString("ValuePropertyNotAssigned", ResourceManager); }
		}
		/// <summary>
		/// The array must contain at least one element.
		/// </summary>
		public static LocalizedString ZeroLengthArrayInvalid
		{
			get { return new LocalizedString("ZeroLengthArrayInvalid", ResourceManager); }
		}
		/// <summary>
		/// The hold mailboxes parameter is not specified.
		/// </summary>
		public static LocalizedString HoldMailboxesParameterIsNotSpecified
		{
			get { return new LocalizedString("HoldMailboxesParameterIsNotSpecified", ResourceManager); }
		}
		/// <summary>
		/// Calling Save isn't allowed because this user configuration isn't new. To apply local changes to this user configuration, call Update instead.
		/// </summary>
		public static LocalizedString CannotSaveNotNewUserConfiguration
		{
			get { return new LocalizedString("CannotSaveNotNewUserConfiguration", ResourceManager); }
		}
		/// <summary>
		/// This operation can't be performed because this service object doesn't have an Id.
		/// </summary>
		public static LocalizedString ServiceObjectDoesNotHaveId
		{
			get { return new LocalizedString("ServiceObjectDoesNotHaveId", ResourceManager); }
		}
		/// <summary>
		/// The collection returned by the service has a different size from the current one.
		/// </summary>
		public static LocalizedString PropertyCollectionSizeMismatch
		{
			get { return new LocalizedString("PropertyCollectionSizeMismatch", ResourceManager); }
		}
		/// <summary>
		/// The specified xsDuration argument couldn't be parsed.
		/// </summary>
		public static LocalizedString XsDurationCouldNotBeParsed
		{
			get { return new LocalizedString("XsDurationCouldNotBeParsed", ResourceManager); }
		}
		/// <summary>
		/// Unknown time zone transition type: {0}
		/// </summary>
		public static LocalizedString UnknownTimeZonePeriodTransitionType
		{
			get { return new LocalizedString("UnknownTimeZonePeriodTransitionType", ResourceManager); }
		}

        /// <summary>
        /// Returns the localized string corresponding to the given key
        /// </summary>
        public static LocalizedString GetLocalizedString( IDs key )
        {
            return new LocalizedString(stringIDs[(uint)key], ResourceManager);
        }

		/// <summary>
		/// Resource Manager
		/// </summary>
		private static ExchangeResourceManager ResourceManager = ExchangeResourceManager.GetResourceManager("Microsoft.Exchange.WebServices.Strings", typeof(Microsoft.Exchange.WebServices.Strings).Assembly);
	}
}
